import os
import pandas as pd
from pandasai import SmartDataframe
import logging

logging.basicConfig(level=logging.INFO)

class LoadData:
    """
    Class for loading data from CSV files and performing operations on the data 
    using an LLM and the pandasAI library.
    
    Attributes:
        path_data (str): The path to the directory where the CSV files are located.
    """
    def __init__(self, path_data='./data/'):
        self.path_data = path_data

    def get_column_names(self):
        """
        Gets the column names from all CSV files in the specified directory and returns a dictionary 
        where the keys are the CSV file names and the values are lists of column names.
        """
        files = os.listdir(self.path_data)
        column_names = {}
        for file in files:
            if file.endswith('.csv'):
                file_path = os.path.join(self.path_data, file)
                try:
                    columns = pd.read_csv(file_path, nrows=0).columns.tolist()
                    column_names[file] = columns
                except Exception as e:
                    logging.error(f"Error reading the file {file}: {e}")
        return column_names
    
    def load_smartdf(self, llm, file):
        """
        Loads a CSV file as a SmartDataframe object, configured to interact with the specified LLM.
        """
        path_file = self.path_data+file
        return SmartDataframe(path_file, config={"llm": llm})

    def sdf_chat(self, prompt, llm, file):
        """
        Performs a natural language query on a SmartDataframe based on the specified CSV file.
        Returns:
            str: The response generated by the LLM. If the file is "Error" or "no_valid", 
                 it returns an error message or a "no_valid" response, respectively.
        """
        if file == "Error":
            return "Error consulting the LLM, check the log for more details."
        if file == "no_valid":
            return "no_valid"
        sdf = self.load_smartdf(llm, file)
        return sdf.chat(prompt)

