from modules.ChatModelHandler import LLMLoader
from modules.DataHandler import LoadData
import pandas as pd
import logging
import streamlit as st
import os
#%% auxiliary functions
def is_image_file(file_path):
    """
    Checks if the given file path corresponds to an image file based on its extension.
    """
    return os.path.isfile(file_path) and file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))

def header_ui():
    """
    Displays header and additional information for the user interface using the Streamlit library
    """
    st.markdown("# Chat with [Bike Store Database](https://www.kaggle.com/datasets/dillonmyrick/bike-store-sample-database)")
    st.markdown("""
    In this app, you can interact with the database by asking questions about statistics, values, and more. Additionally, you can request DataFrames and plots, which the model will generate and display at the bottom of the chat box.
    """)
    st.markdown("### Sample questions: ")
    st.markdown("- What is the price of the cheapest product?")
    st.markdown("- What are the best-selling products?")
    st.markdown("- Plot a histogram of product prices.")
    
#%% ui structure
header_ui()
user_input = st.text_input("Write your question or request to the database:")#

if user_input:
    # Select the CSV file using the LLM
    ld = LoadData()
    llmloader = LLMLoader(model_name="gpt-4o-mini")
    table = llmloader.determine_table_from_prompt(user_input)

    if table!='no_valid':
        st.caption(f"Based on your query I have used the table {table}")
    else:
        st.caption("Your query appears to be unrelated to the database. I can only handle database-related requests.")    
    
    # Query the dataframe using the LLM
    response = ld.sdf_chat(user_input,llmloader.load_llm(),table)
    
    logging.info("__________ Response __________")
    logging.info(f"Table used: {table}")
    logging.info(response)
    
    # Display the response in the UI depending on the data type in the response:
    if isinstance(response, pd.DataFrame):
        st.write("DataFrame generated by the model:")
        st.dataframe(response)  
    elif isinstance(response, str):
        response = response.strip()
        # Validates if the response is a path and if it is an image file
        if os.path.exists(response) and is_image_file(response):
            st.image(response, caption="Plot generated by the model")
        else:
            st.text_area("Answer:", value=response, height=200)
    else:
        st.text_area("Answer:", value=str(response), height=200)
